#include <bits/stdc++.h>

using namespace std;

// Common Utilities
//______________________________________________________________________________

// Macros
#ifdef D3BUG
  #define cerrd if (D3BUG) cerr
#else
  #define cerrd if (false) cerr
#endif

// Types
template <typename T> using vector1D = vector<T>;
template <typename T> using vector2D = vector<vector1D<T>>;
template <typename T> using vector3D = vector<vector2D<T>>;
template <typename T> using uset = unordered_set<T>;
template <typename K, typename V> using umap = unordered_map<K, V>;

// Output stream overloads.
template<
  // Output stream overload for STL containers with one explicit type parameter.
  template<class> class Range, class T,
  typename = enable_if_t<is_same_v<Range<T>, deque<T>> ||
                         is_same_v<Range<T>, forward_list<T>> ||
                         is_same_v<Range<T>, list<T>> ||
                         is_same_v<Range<T>, multiset<T>> ||
                         is_same_v<Range<T>, set<T>> ||
                         is_same_v<Range<T>, unordered_multiset<T>> ||
                         is_same_v<Range<T>, unordered_set<T>> ||
                         is_same_v<Range<T>, vector<T>>>
>
ostream& operator<<(ostream& out, const Range<T>& range) {
  constexpr auto brackets = is_same_v<Range<T>, vector<T>> ? "[]" : "{}";
  out << brackets[0];
  for (auto it = range.begin(); it != range.end(); ++it) {
    out << *it << (next(it) != range.end() ? ", " : "");
  }
  return out << brackets[1];
}

template<
  // Output stream overload for STL containers with two explicit type parameters.
  template<class, class> class Range, class K, class V,
  typename = enable_if_t<is_same_v<Range<K, V>, map<K, V>> ||
                         is_same_v<Range<K, V>, multimap<K, V>> ||
                         is_same_v<Range<K, V>, unordered_map<K, V>> ||
                         is_same_v<Range<K, V>, unordered_multimap<K, V>>>
>
ostream& operator<<(ostream& out, const Range<K, V>& range) {
  out << '{';
  for (auto it = range.begin(); it != range.end(); ++it) {
      out << it->first << ": " << it->second << (next(it) != range.end() ? ", " : "");
  }
  return out << '}';
}

template <class F, class S>
ostream& operator<<(ostream& out, const pair<F, S>& duo) {
  return out << '(' << duo.first << ", " << duo.second << ')';
}

namespace std {
  template<typename T, typename U>
  struct hash<pair<T, U>> {
    size_t operator()(const pair<T, U>& p) const noexcept {
      return hash<T>{}(p.first) ^ (hash<U>{}(p.second) << 1);
    }
  };
}

// Forward declaration of the solution function.
void solution();

// Initialize the execution environment and call the solution function.
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);

  solution();
  return 0;
}

// Definitions
#define int long long
#define INF 0x3f3f3f3f
#define len(a) (int)((a).size())
#define F first
#define S second
#define pf emplace_front
#define pb emplace_back

// Solution
//______________________________________________________________________________

int MOD = pow(10, 9) + 7;
int T, N, M, L, R, X, Y;

void solution() {
  cin >> T;
  while (T --> 0) {
    $0
  }
}